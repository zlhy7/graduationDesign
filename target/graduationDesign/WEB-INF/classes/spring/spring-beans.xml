<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd
       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd">
  <!-- Spring中引入其他配置文件 -->
  <!--<import resource="classpath:/spring/spring-mvc.xml" />-->
  <!-- 配置数据库相关参数properties的属性：${url} -->
  <!-- 自动扫描该包，使SpringMVC认为包下用了@controller注解的类是控制器 -->
  <context:component-scan base-package="com.renyong.modules.*" />
  <context:component-scan base-package="com.renyong.base.*" />
  <context:property-placeholder location="classpath:jdbc.properties" />
  <!-- 创建连接池  配置连接池的属性值 -->
  <bean id="ds" class="com.mchange.v2.c3p0.ComboPooledDataSource">
    <property name="driverClass" value="${jdbc.driverClass}"/>
    <property name="jdbcUrl" value="${jdbc.jdbcUrl}"/>
    <property name="user" value="${jdbc.user}"/>
    <property name="password" value="${jdbc.password}"/>
    <property name="minPoolSize" value="${jdbc.minPoolSize}"/><!--最小连接数-->
    <property name="maxPoolSize" value="${jdbc.maxPoolSize}"/><!--最大连接数-->
    <property name="initialPoolSize" value="${jdbc.initialPoolSize}"/><!--初始化连接数-->
  </bean>
  <!-- 配置SqlSessionFactory对象 -->
  <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
    <!-- 注入数据库连接池 -->
    <property name="dataSource" ref="ds" />
    <!-- 扫描sql配置文件:mapper需要的xml文件 -->
    <property name="mapperLocations" value="classpath:/com/renyong/modules/*/mapper/*.xml" />
    <property name="typeAliasesSuperType" value="com.renyong.base.model.BaseEntity"/>
    <!--引入mybatis文件-->
    <property name="configLocation" value="classpath:/mybatis/mybatis.xml"/>
  </bean>
  <!-- 配置扫描Dao接口包，动态实现Dao接口，注入到spring容器中 -->
  <!-- 扫描basePackage下所有以@MyBatisDao注解的接口 -->
  <bean id="mapperScannerConfigurerMaster" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
    <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
    <property name="basePackage" value="com.**.modules.**.dao"/>
    <property name="annotationClass" value="com.renyong.base.annotation.MybatisDao"/>
  </bean>

  <!-- 配置事务管理器 -->
  <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
    <!-- 注入数据库连接池 -->
    <property name="dataSource" ref="ds" />
  </bean>
  <!-- 配置基于注解的声明式事务 -->
  <tx:annotation-driven transaction-manager="transactionManager" />

  <!-- 在会话工厂中取出SqlSessionTemplate这个对象 -->
  <bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
    <constructor-arg index="0" ref="sqlSessionFactory" />
  </bean>

  <!-- 开启aspectj代理 注解式切面类-->
  <aop:aspectj-autoproxy proxy-target-class="true"/>
</beans>
